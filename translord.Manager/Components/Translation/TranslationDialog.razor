@using translord.Enums
@using translord.Manager.Models
@inject ITranslator Translator
@implements IDialogContentComponent<GroupedTranslations>

<FluentDialogBody Class="translations-dialog">
    <div>
        @if (IsAddingNewLabel)
        {
            <FluentTextField
                Value="@Content.Key"
                ValueChanged="@(s => { Content.Key = s; ValidateDialog(); })"
                Label="Key"
                Required>
            </FluentTextField>
        }
        else
        {
            <span>@Content.Key</span>
        }
        <br/>
        <b>Translations:</b>
        <br/>
        @foreach (var lang in Translator.GetSupportedLanguages())
        {
            <FluentStack Orientation="Orientation.Horizontal" Class="translation-wrapper">
                <FluentTextField
                    ValueChanged="@(s => { Content.Translations.Find(x => x.Language == lang)!.Value = s; ValidateDialog(); })"
                    Value="@Content.Translations.Find(x => x.Language == lang)!.Value"
                    Label="@lang.GetName()"
                    Required="@(DefaultLang == lang)">
                </FluentTextField>
                @if (Translator.IsTranslationSupported)
                {
                    <FluentButton
                        IconStart="@(new Icons.Regular.Size16.Translate())"
                        @onclick="@(() => TranslateLabel(lang))"
                        Disabled="@(Translator.GetDefaultLanguage().HasValue ? Content.Translations.Find(x => x.Language == Translator.GetDefaultLanguage()) is null : Content.Translations.All(x => string.IsNullOrEmpty(x.Value)))">
                    </FluentButton>
                }
            </FluentStack>
        }
    </div>
</FluentDialogBody>

@code {
    [Parameter] public GroupedTranslations Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    bool IsAddingNewLabel { get; set; }
    Language? DefaultLang { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsAddingNewLabel = string.IsNullOrEmpty(Content.Key);
        DefaultLang = Translator.GetDefaultLanguage();
        ValidateDialog();
    }

    private void ValidateDialog()
    {
        if (DefaultLang.HasValue)
        {
            Dialog?.TogglePrimaryActionButton(!string.IsNullOrEmpty(Content.Translations.FirstOrDefault(x => x.Language == DefaultLang)?.Value) && !string.IsNullOrEmpty(Content.Key));
        }
        else
        {
            Dialog?.TogglePrimaryActionButton(Content.Translations.Any(x => string.IsNullOrEmpty(x.Value)) && !string.IsNullOrEmpty(Content.Key));
        }
    }

    private async Task TranslateLabel(Language to)
    {
        var fromLang = DefaultLang ??
                       Content.Translations.First(x => x.Language != to && !string.IsNullOrEmpty(x.Value)).Language;
        var translation = await Translator.Translate(Content.Translations.Find(x => x.Language == fromLang)!.Value, fromLang, to);
        Content.Translations.Find(x => x.Language == to)!.Value = translation;
    }
}