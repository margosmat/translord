@page "/translations"
@using translord;
@using translord.Enums
@using translord.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using translord.Manager.Components.Translation
@inject ITranslator Translator
@inject IDialogService DialogService

@attribute [Authorize]

@rendermode RenderMode.InteractiveServer

<AuthorizeView>
    <h3>Translations</h3>

    <QuickGrid Items="@itemsQueryable">
      <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(x => x.Key)" Sortable="true" />
      <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(x => x.Value)" Sortable="true" />
      <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(x => x.Language)" Sortable="true" />
      <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Title="Actions" Context="actionsContext">
        <FluentButton @onclick="@(() => OpenDialogAsync(actionsContext))">Edit</FluentButton>
      </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
    </QuickGrid>
</AuthorizeView>

@code {
    IQueryable<Translation>? itemsQueryable;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var translations = await Translator.GetAllTranslations(Language.Polish);
        itemsQueryable = translations.AsQueryable();
    }

    private async Task OpenDialogAsync(Translation t)
    {
        DialogParameters parameters = new()
        {
            Title = t.Key,
            PrimaryAction = "Save",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<TranslationDialog>(t, parameters);
        DialogResult? result = await dialog.Result;
    }

}