@page "/translations"
@using translord;
@using translord.Enums
@using translord.Models
@using Microsoft.AspNetCore.Authorization
@using translord.Manager.Components.Translation
@using translord.Manager.Models
@inject ITranslator Translator
@inject IDialogService DialogService

@attribute [Authorize]

@rendermode RenderMode.InteractiveServer

<AuthorizeView>
    <div class="translations-page">
        <h3>Translations</h3>

        @if (_itemsQueryable != null && _itemsQueryable.Any())
        {
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())" @onclick="@(() => OpenDialogAsync())">Add new</FluentButton>
            <div class="grid">
                <FluentDataGrid Items="@_itemsQueryable">
                    <PropertyColumn Property="@(x => x.Key)" Sortable="true"/>
                    @foreach (var lang in Translator.GetSupportedLanguages())
                    {
                        <TemplateColumn Title="@(lang.GetName())" Context="langContext">
                            @(langContext.First(y => y.Language == lang).Value)
                        </TemplateColumn>
                    }
                    <TemplateColumn Title="Actions" Context="actionsContext">
                        <FluentButton IconStart="@(new Icons.Regular.Size28.Pen())" @onclick="@(() => OpenDialogAsync(actionsContext))"></FluentButton>
                        <FluentButton IconStart="@(new Icons.Regular.Size28.Delete().WithColor(Color.Warning))" @onclick="@(async () => await RemoveTranslation(actionsContext.Key))"></FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>
        }
        else
        {
            <FluentProgressRing Width="64px"></FluentProgressRing>
        }
    </div>
</AuthorizeView>

@code {
    IQueryable<IGrouping<string, Translation>>? _itemsQueryable;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshData();
    }
    
    private async Task RefreshData()
    {
        var translations = await Translator.GetAllTranslations();
        _itemsQueryable = translations.GroupBy(x => x.Key).AsQueryable();
    }

    private async Task RemoveTranslation(string key)
    {
        await Translator.RemoveTranslation(key);
        await RefreshData();
    }

    private async Task OpenDialogAsync(IGrouping<string, Translation>? t = null)
    {
        DialogParameters parameters = new()
        {
            Title = t?.Key is not null ? "Edit" : "New Translation",
            PrimaryAction = "Save",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };

        var groupedTranslation = new GroupedTranslations(Translator.GetSupportedLanguages().Count)
        {
            Key = t?.Key ?? "",
            Translations = t?.Select(x => x.Copy()).ToList() ?? Translator.GetSupportedLanguages().Select(x => new Translation
            {
                Key = "",
                Language = x,
                Value = ""
            }).ToList()
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<TranslationDialog>(groupedTranslation, parameters);
        DialogResult result = await dialog.Result;
        if (result is { Data: GroupedTranslations data, Cancelled: false })
        {
            var updatedTranslations = t is null
                ? Translator.GetSupportedLanguages().Where(lang => !string.IsNullOrEmpty(data.Translations.First(x => x.Language == lang).Value)).ToList()
                : Translator.GetSupportedLanguages().Where(lang => t.First(x => x.Language == lang).Value != data.Translations.First(x => x.Language == lang).Value).ToList();
            foreach (var lang in updatedTranslations)
            {
                await Translator.SaveTranslation(data.Key, lang, data.Translations.First(x => x.Language == lang).Value);
            }
            if (updatedTranslations.Count > 0) await RefreshData();
        }
    }

}