@page "/translations"
@using translord;
@using translord.Enums
@using translord.Models
@using Microsoft.AspNetCore.Authorization
@using translord.Manager.Components.Translation
@using translord.Manager.Models
@inject ITranslator Translator
@inject IDialogService DialogService

@attribute [Authorize]

@rendermode RenderMode.InteractiveServer

<AuthorizeView>
    <div class="translations-page">
        <h3>Translations</h3>

        <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton
                Appearance="Appearance.Accent"
                IconStart="@(new Icons.Regular.Size16.Add())"
                @onclick="@(() => OpenDialogAsync())"
            >
                Add new
            </FluentButton>
            <FluentButton
                Appearance="Appearance.Accent"
                IconStart="@(new Icons.Regular.Size16.Translate())"
                @onclick="@(() => OpenDialogAsync())"
            >
                Translate missing
            </FluentButton>
            <FluentButton
                Appearance="Appearance.Accent"
                IconStart="@(new Icons.Regular.Size16.ArrowImport())"
                @onclick="@(OpenImportDialogAsync)"
            >
                Import
            </FluentButton>
        </FluentStack>
        <div class="grid">
            <FluentDataGrid
                Items="@_itemsQueryable"
                ItemSize="54"
                Loading="@(_itemsQueryable is null || !_itemsQueryable.Any())"
                ResizableColumns="true"
                GenerateHeader="GenerateHeaderOption.Sticky"
                Style="@($"width: {_gridSize}px")"
                SortByAscending="true"
                GridTemplateColumns="@($"200px 150px {string.Join(" ", Translator.GetSupportedLanguages().Select(_ => "200px"))}")"
            >
                <PropertyColumn Property="@(x => x.Key)" Sortable="true" InitialSortDirection="SortDirection.Auto" IsDefaultSortColumn />
                <TemplateColumn Title="Actions" Context="actionsContext">
                    <FluentButton IconStart="@(new Icons.Regular.Size24.Pen())" @onclick="@(() => OpenDialogAsync(actionsContext))"></FluentButton>
                    <FluentButton IconStart="@(new Icons.Regular.Size24.Delete().WithColor(Color.Warning))" @onclick="@(async () => await RemoveTranslation(actionsContext.Key))"></FluentButton>
                    <FluentButton IconStart="@(new Icons.Filled.Size24.Translate())" @onclick="@(async () => await TranslateLabel(actionsContext))"></FluentButton>
                </TemplateColumn>
                @foreach (var lang in Translator.GetSupportedLanguages())
                {
                    <TemplateColumn Title="@(lang.GetName())" Context="langContext">
                        @(langContext.First(y => y.Language == lang).Value)
                    </TemplateColumn>
                }
            </FluentDataGrid>
        </div>
    </div>
</AuthorizeView>

@code {
    IQueryable<IGrouping<string, Translation>>? _itemsQueryable;
    int _gridSize = 0;
    Language? _defaultLang;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshData();
        _gridSize = 350 + Translator.GetSupportedLanguages().Count * 200;
        _defaultLang = Translator.GetDefaultLanguage();
    }
    
    private async Task RefreshData()
    {
        var translations = await Translator.GetAllTranslations();
        _itemsQueryable = translations.GroupBy(x => x.Key).AsQueryable();
    }

    private async Task RemoveTranslation(string key)
    {
        await Translator.RemoveTranslation(key);
        await RefreshData();
    }

    private async Task TranslateLabel(IGrouping<string, Translation> t)
    {
        var fromTranslation = _defaultLang.HasValue ? t.First(x => x.Language == _defaultLang) :
                       t.First(x => !string.IsNullOrEmpty(x.Value));
        var toTranslate = Translator.GetSupportedLanguages().Where(lang => t.All(x => x.Language != lang) || string.IsNullOrEmpty(t.First(x => x.Language == lang).Value)).ToList();
        var translations = await Translator.Translate(fromTranslation.Value, fromTranslation.Language, toTranslate);
        foreach (var item in toTranslate.Select((lang, index) => new { lang, index }))
        {
            await Translator.SaveTranslation(t.Key, item.lang, translations[item.index]);
            var translationToUpdate = t.First(x => x.Language == item.lang);
            translationToUpdate.Value = translations[item.index];
        }
    }

    private async Task OpenDialogAsync(IGrouping<string, Translation>? t = null)
    {
        DialogParameters parameters = new()
        {
            Title = t?.Key is not null ? "Edit" : "New Translation",
            PrimaryAction = "Save",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };

        var groupedTranslation = new GroupedTranslations(Translator.GetSupportedLanguages().Count)
        {
            Key = t?.Key ?? "",
            Translations = t?.Select(x => x.Copy()).ToList() ?? Translator.GetSupportedLanguages().Select(x => new Translation
            {
                Key = "",
                Language = x,
                Value = ""
            }).ToList()
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<TranslationDialog>(groupedTranslation, parameters);
        DialogResult result = await dialog.Result;
        if (result is { Data: GroupedTranslations data, Cancelled: false })
        {
            var updatedTranslations = t is null
                ? Translator.GetSupportedLanguages().Where(lang => !string.IsNullOrEmpty(data.Translations.First(x => x.Language == lang).Value)).ToList()
                : Translator.GetSupportedLanguages().Where(lang => t.First(x => x.Language == lang).Value != data.Translations.First(x => x.Language == lang).Value).ToList();
            foreach (var lang in updatedTranslations)
            {
                await Translator.SaveTranslation(data.Key, lang, data.Translations.First(x => x.Language == lang).Value);
            }
            if (updatedTranslations.Count > 0) await RefreshData();
        }
    }

    private async Task OpenImportDialogAsync()
    {
        DialogParameters parameters = new()
        {
            Title = "Import",
            PrimaryAction = "Import",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "600px",
            Height = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };
        
        IDialogReference dialog = await DialogService.ShowDialogAsync<ImportTranslationsDialog>(parameters);
        DialogResult result = await dialog.Result;
    }
}