@page "/translations"
@using translord;
@using translord.Enums
@using translord.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using translord.Manager.Components.Translation
@inject ITranslator Translator
@inject IDialogService DialogService

@attribute [Authorize]

@rendermode RenderMode.InteractiveServer

<AuthorizeView>
    <h3>Translations</h3>

    <QuickGrid Items="@_itemsQueryable">
      <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(x => x.Key)" Sortable="true" />
      @foreach (var lang in Translator.GetSupportedLanguages())
      {
          <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Title="@(lang.GetName())" Context="langContext">
              @(langContext.First(y => y.Language == lang).Value)
          </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
      }
      <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Title="Actions" Context="actionsContext">
        <FluentButton @onclick="@(() => OpenDialogAsync(actionsContext))">Edit</FluentButton>
      </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
    </QuickGrid>
</AuthorizeView>

@code {
    IQueryable<IGrouping<string, Translation>>? _itemsQueryable;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var translations = await Translator.GetAllTranslations();
        _itemsQueryable = translations.GroupBy(x => x.Key).AsQueryable();
    }

    private async Task OpenDialogAsync(IGrouping<string, Translation> t)
    {
        DialogParameters parameters = new()
        {
            Title = t.Key,
            PrimaryAction = "Save",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<TranslationDialog>(t, parameters);
        DialogResult? result = await dialog.Result;
        var data = result.Data as IGrouping<string, Translation>;
        foreach (var translation in data)
        {
            Console.WriteLine($@"{translation.Key}{translation.Language}{translation.Value}");
        }
    }

}